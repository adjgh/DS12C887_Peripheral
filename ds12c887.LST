C51 COMPILER V9.00   DS12C887                                                              03/22/2020 22:35:45 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE DS12C887
OBJECT MODULE PLACED IN ds12c887.OBJ
COMPILER INVOKED BY: C:\Keil4\C51\BIN\C51.EXE ds12c887.c DEBUG OBJECTEXTEND

line level    source

   1          #include "ds12c887.h"
   2          
   3          
   4          void DS12C887_Peri_Write(unsigned char offset,unsigned char dat)
   5          {
   6   1        XBYTE[0x7f00 + offset] = dat;
   7   1      }
   8          
   9          unsigned char DS12C887_Peri_Read(unsigned char offset)
  10          {
  11   1          return (XBYTE[0x7f00 + offset]);
  12   1      }
  13          
  14          void SetTime(PTIME time)
  15          {
  16   1        unsigned char ctrl = 0;
  17   1        //特别注意读-修改-写
  18   1        ctrl = DS12C887_Peri_Read(CR_B);//读
  19   1        Set_Bit(ctrl,7);      //设置SET位，禁止更新，修改
  20   1        DS12C887_Peri_Write(CR_B,ctrl);//写
  21   1      
  22   1        DS12C887_Peri_Write(SEC,time->second);
  23   1        DS12C887_Peri_Write(MIN,time->minute);
  24   1        DS12C887_Peri_Write(HOUR,time->hour);
  25   1        DS12C887_Peri_Write(WEEKDAY,time->weekday);
  26   1        DS12C887_Peri_Write(DAY,time->day);
  27   1        DS12C887_Peri_Write(MONTH,time->month);
  28   1        DS12C887_Peri_Write(YEAR,time->year);
  29   1        //特别注意读-修改-写
  30   1        ctrl = DS12C887_Peri_Read(CR_B);//读
  31   1        Clr_Bit(ctrl,7);//清零SET位，恢复更新,修改
  32   1        DS12C887_Peri_Write(CR_B,ctrl);//写
  33   1      }
  34          
  35          void GetTime(PTIME time)
  36          {
  37   1        while(DS12C887_Peri_Read(CR_A) & 0x80 != 0);
  38   1        time->second  = DS12C887_Peri_Read(SEC);
  39   1        while(DS12C887_Peri_Read(CR_A) & 0x80 != 0);
  40   1        time->minute  = DS12C887_Peri_Read(MIN);
  41   1        while(DS12C887_Peri_Read(CR_A) & 0x80 != 0);
  42   1        time->hour    = DS12C887_Peri_Read(HOUR);
  43   1        while(DS12C887_Peri_Read(CR_A) & 0x80 != 0);
  44   1        time->weekday = DS12C887_Peri_Read(WEEKDAY);
  45   1        while(DS12C887_Peri_Read(CR_A) & 0x80 != 0);
  46   1        time->day     = DS12C887_Peri_Read(DAY);
  47   1        while(DS12C887_Peri_Read(CR_A) & 0x80 != 0);
  48   1        time->month   = DS12C887_Peri_Read(MONTH);
  49   1        while(DS12C887_Peri_Read(CR_A) & 0x80 != 0);
  50   1        time->year    = DS12C887_Peri_Read(YEAR);
  51   1      }
  52          
  53          unsigned char DS12C887_Is_LowPower(void)
  54          {
  55   1        if (DS12C887_Peri_Read(CR_D) & 0x80 == 0)
C51 COMPILER V9.00   DS12C887                                                              03/22/2020 22:35:45 PAGE 2   

  56   1         return LOW_POWER;
  57   1        return 0;
  58   1      }
  59          
  60          void Alarm_Enable(PTIME time)
  61          {
  62   1        unsigned char ctrl;
  63   1        ctrl = DS12C887_Peri_Read(CR_B);//特别注意读-修改-写
  64   1        Set_Bit(ctrl,7);      //设置SET位，禁止更新
  65   1        DS12C887_Peri_Write(CR_B,ctrl);
  66   1      
  67   1        DS12C887_Peri_Write(SEC_ALARM,time->second);
  68   1        DS12C887_Peri_Write(MIN_ALARM,time->minute);
  69   1        DS12C887_Peri_Write(HOUR_ALARM,time->hour);
  70   1      
  71   1        ctrl = DS12C887_Peri_Read(CR_B);//特别注意读-修改-写
  72   1        Set_Bit(ctrl,5);      //设置AIE位,闹钟
  73   1        Clr_Bit(ctrl,7);//清零SET位，恢复更新
  74   1        DS12C887_Peri_Write(CR_B,ctrl);
  75   1      }
  76          
  77          void Alarm_Disable(void)
  78          {
  79   1        unsigned char ctrl;
  80   1        ctrl = DS12C887_Peri_Read(CR_B);//特别注意读-修改-写
  81   1        Clr_Bit(ctrl,5);      //置零AIE位
  82   1        DS12C887_Peri_Write(CR_B,ctrl);
  83   1      }
  84          
  85          
  86          void Init_DS12C887(void)
  87          { 
  88   1        unsigned char ctrl = 0;
  89   1        Clr_Bit(ctrl,2);      //BCD格式
  90   1        Set_Bit(ctrl,1);      //24小时制
  91   1        Clr_Bit(ctrl,0); //取消夏令时制
  92   1        DS12C887_Peri_Write(CR_B,ctrl);
  93   1        DS12C887_Peri_Write(CR_A,OSCILLATOR_OPEN);//振荡器开启
  94   1      }
  95          
  96          unsigned char bcd2dec(unsigned char dat)
  97          {
  98   1          unsigned char temp;
  99   1      
 100   1          temp = ((dat >> 4) * 10 + (dat & 0x0f));
 101   1          return temp;
 102   1      }
 103          
 104          #ifdef SQW_OUTPUT
              
              void Sqw_Output(unsigned char freq)
              {
                unsigned char ctrl;
                ctrl = DS12C887_Peri_Read(CR_B);//特别注意读-修改-写
                Set_Bit(ctrl,6);
                Set_Bit(ctrl,3);
                DS12C887_Peri_Write(CR_B,ctrl);
              
                ctrl = DS12C887_Peri_Read(CR_A);//特别注意读-修改-写
                ctrl |= freq;
                DS12C887_Peri_Write(CR_A,ctrl);
              }
C51 COMPILER V9.00   DS12C887                                                              03/22/2020 22:35:45 PAGE 3   

              
              void Sqw_Output_NoIrq(unsigned char freq)
              {
                unsigned char ctrl;
                ctrl = DS12C887_Peri_Read(CR_B);//特别注意读-修改-写
                Clr_Bit(ctrl,6);
                Set_Bit(ctrl,3);
                DS12C887_Peri_Write(CR_B,ctrl);
              
                ctrl = DS12C887_Peri_Read(CR_A);//特别注意读-修改-写
                ctrl |= freq;
                DS12C887_Peri_Write(CR_A,ctrl);
              }
              #endif
 132            
 133          
 134                  


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    378    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
